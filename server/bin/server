const express = require('express');
const http = require('http');
const cors = require('cors');
const bodyParser = require('body-parser');

const app = express();
const server = http.createServer(app);
const port = 4001;
const socketIO = require('socket.io');

const io = socketIO(server);
const { Games, Users } = require('../models');

const users = require('../routes/users');
const games = require('../routes/games');

app.use(cors());

app.set('view engine', 'pug');
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

app.use('/api/users', users);
app.use('/api/games', games);

io.on('connection', (socket) => {
  socket.on('join-room', (code, playerId, joinedPlayerName) => {
    Games.findAll({ where: { partyCode: code }, raw: true })
      .then((game) => {
        if (!game[0].playerWhite && parseInt(playerId, 10) !== game[0].playerBlack) {
          Promise.all([socket.join(code),
            Games.update({ playerWhite: parseInt(playerId, 10) }, { where: { partyCode: code } })])
            .then(() => {
              Games.findAll({ where: { partyCode: code }, raw: true })
                .then((newGame) => Promise
                  .all([Users.findAll({ where: { id: newGame[0].playerBlack }, raw: true }),
                    Users.findAll({ where: { id: newGame[0].playerWhite }, raw: true })])
                  .then((players) => io.sockets.to(code).emit('join-room', players[0][0].name, players[1][0].name, joinedPlayerName, newGame[0].id)));
            });
        } else {
          Promise.all([socket.join(code),
            Users.findAll({ where: { id: game[0].playerBlack }, raw: true }),
            Users.findAll({ where: { id: game[0].playerWhite }, raw: true })])
            .then((players) => io.sockets.to(code).emit('join-room', players[1][0].name, players[2][0].name, joinedPlayerName, game[0].id));
        }
      });
  });

  socket.on('create-game', (newGame, code, playerId) => {
    Promise.all([socket.join(code),
      Games.create({
        board: JSON.stringify(newGame),
        playerBlack: parseInt(playerId, 10),
        partyCode: code,
        status: 1,
        passWhite: 0,
        passBlack: 0,
      })])
      .then((res) => {
        io.sockets.to(code).emit('create-game', res[1].get('id'));
      });
  });

  socket.on('update board', (updatedData, code, player, pass, color) => {
    if (pass === 1) {
      if (color === 'black') {
        Promise.all([io.sockets.to(code).emit('update board', updatedData, player, pass, color),
          Games.update({
            board: JSON.stringify(updatedData),
            passBlack: pass,
          }, { where: { partyCode: code } })]);
      } else {
        Promise.all([io.sockets.to(code).emit('update board', updatedData, player, pass, color),
          Games.update({
            board: JSON.stringify(updatedData),
            passWhite: pass,
          }, { where: { partyCode: code } })]);
      }
    } else {
      Promise.all([io.sockets.to(code).emit('update board', updatedData, player),
        Games.update({ board: JSON.stringify(updatedData) }, { where: { partyCode: code } })]);
    }
  });

  socket.on('game-end', (code, winner) => {
    if (winner !== 'draw') {
      Promise.all([io.sockets.to(code).emit('game-end', `La partie est terminé, le vainqueur est ${winner}`),
        Games.update({ status: 0, winner }, { where: { partyCode: code } })]);
    } else {
      Promise.all([io.sockets.to(code).emit('game-end', 'La partie est terminé, il y a égalité'),
        Games.update({ status: 0, winner: 'draw' }, { where: { partyCode: code } })]);
    }
  });
});

// catch 404 and forward to error handler
app.use((req, res, next) => {
  const err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handler
app.use((err, req, res) => {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = err;

  // render the error page
  res.status(err.status || 500);
  res.send(res.locals.message);
});

server.listen(port, () => console.log(`Listening on port ${port}`));
